play.application.loader = biz.lobachev.annette.persons.impl.PersonServiceLoader
play.http.secret.key = ${?SECRET_KEY}
play.server.pidfile.path = "/dev/null"

akka.cluster.sharding.state-store-mode = ddata

elastic {
  url = "https://localhost:9200"
  url = ${?ELASTIC_URL}
  prefix = "dev"
  prefix = ${?ELASTIC_PREFIX}
  username = "admin"
  username = ${?ELASTIC_USERNAME}
  password = "admin"
  password = ${?ELASTIC_PASSWORD}
  allowInsecure = true
  allowInsecure = ${?ELASTIC_ALLOW_INSECURE}
}

indexing {
  connection {
    url = "https://localhost:9200"
    url = ${?INDEXING_URL}
    username = "admin"
    username = ${?INDEXING_USERNAME}
    password = "admin"
    password = ${?INDEXING_PASSWORD}
    allow-insecure = false
    allow-insecure = ${?INDEXING_ALLOW_INSECURE}
  }

  person-index {
    index = ${?INDEX_PREFIX}persons-person
    index = ${?PERSONS_PERSON_INDEX}
    mappings = {

      id = {
        type = keyword
        field = id
      }

      lastname = {
        type = text
        field = lastname
        fielddata = true
        analyzer = name_analyzer
        search-analyzer = name_search
        fields {
          keyword {
            type = keyword
          }
        }
      }

      firstname = {
        type = text
        field = firstname
        fielddata = true
        analyzer = name_analyzer
        search-analyzer = name_search
        fields {
          keyword {
            type = keyword
          }
        }
      }

      middlename = {
        type = text
        field = middlename
        fielddata = true
        analyzer = name_analyzer
        search-analyzer = name_search
        fields {
          keyword {
            type = keyword
          }
        }
      }

      categoryId = {
        type = keyword
        field = categoryId
      }

      phone = {
        type = keyword
        field = phone
      }

      email = {
        type = keyword
        field = email
      }

      sex = {
        type = keyword
      }

      birthDate = {
        type = date
        field = birthDate
      }

      updatedAt = {
        type = date
        field = updatedAt
      }
    }

    analyzers = {
      name_analyzer {
        type: custom
        tokenizer = name_tokenizer
        token-filters = ["lowercase"]
      }

      name_search {
        type: custom
        tokenizer = lowercase
      }
    }

    tokenizers = {
      name_tokenizer {
        type = edge-n-gram
        min-gram = 2
        max-gram = 50
      }
    }
  }
}


annette {
  attributes-service {
    indexTopic = ${?KAFKA_ATTRIBUTE_INDEX_TOPIC_PREFIX}index_events
    indexTopic = ${?KAFKA_ATTRIBUTE_INDEX_TOPIC}
    enable-subscription = true
    enable-subscription = ${?ENABLE_ATTRIBUTE_SUBSCRIPTION}
  }
}

annette.discovery.services {
  kafka_native = "tcp://localhost:9092"
  kafka_native = ${?KAFKA_URL}
}

cassandra.default {
  ## list the contact points here
  contact-points = "localhost:9042"
  contact-points = ${?CASSANDRA_URL}
  ## keyspace name
  keyspace = ${?KEYSPACE_PREFIX}persons
  keyspace = ${?KEYSPACE}
  ## authentication
  authentication {
    username = "cassandra"
    username = ${?CASSANDRA_USERNAME}
    password = "cassandra"
    password = ${?CASSANDRA_PASSWORD}
  }

  session-provider = akka.persistence.cassandra.ConfigSessionProvider
  replication-factor = ${?CASSANDRA_REPLICATION_FACTOR}
}

cassandra-journal = ${cassandra.default}
cassandra-snapshot-store = ${cassandra.default}

cassandra-journal.events-by-tag.flush-interval = 100ms
cassandra-journal.events-by-tag.flush-interval = ${?FLUSH_INTERVAL}
cassandra-query-journal.events-by-tag.eventual-consistency-delay = 100ms
cassandra-query-journal.events-by-tag.eventual-consistency-delay = ${?EVENTUAL_CONSISTENCY_DELAY}
cassandra-query-journal.delayed-event-timeout = 30s
cassandra-query-journal.delayed-event-timeout = ${?DELAYED_EVENT_TIMEOUT}
cassandra-query-journal.refresh-interval = 100ms
cassandra-query-journal.refresh-interval = ${?REFRESH_INTERVAL}
cassandra-journal.pubsub-minimum-interval = 200ms
cassandra-journal.pubsub-minimum-interval = ${?PUBSUB_MIN_INTERVAL}

lagom.persistence {
  read-side.cassandra = ${cassandra.default}

  snapshot-after = 100
  passivate-after-idle-timeout = 300s
}



