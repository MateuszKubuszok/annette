play {
  application.loader = biz.lobachev.annette.api_gateway.AnnetteApiLoader

  # TODO: play.filters.headers.contentSecurityPolicy is deprecated in 2.7.0.  Please use play.filters.csp.CSPFilter instead.
  filters.headers.contentSecurityPolicy = "default-src * 'unsafe-inline' 'unsafe-eval' data:; script-src * 'unsafe-inline' 'unsafe-eval'; connect-src * 'unsafe-inline'; img-src * data: blob: 'unsafe-inline'; frame-src *; style-src * 'unsafe-inline';"

  filters.disabled += play.filters.csrf.CSRFFilter
  filters.disabled += play.filters.headers.SecurityHeadersFilter
  filters.disabled += play.filters.hosts.AllowedHostsFilter

  filters.cors {
    pathPrefixes = ["/"]
    allowedOrigins = null // ["*"]
    allowedHttpMethods = null // ["GET", "POST", "OPTIONS", "PUT", "DELETE"]
    allowedHttpHeaders = null // ["Accept", "Authorization"]
    #  preflightMaxAge = 3 days
  }

  server.pidfile.path = "/dev/null"
  http.secret.key = ${?SECRET_KEY}

  http.parser.maxMemoryBuffer = 10485760
  http.parser.maxMemoryBuffer = ${?MAX_MEMORY_BUFFER}
  http.parser.maxDiskBuffer = 10485760
  http.parser.maxDiskBuffer = ${?MAX_DIST_BUFFER}
}

lagom {
  circuit-breaker.default {
    enabled = on
    exception-whitelist = ["biz.lobachev.annette.core.exception.AnnetteTransportException"]
  }
}

annette {
  authentication {
    # Configuration for Keycloak authentication
    keycloak {

      # Default Keycloak's configuration
      # It can be found in Installation tab of Keycloak's client configuration in Keycloak Admin Console
      config {
        realm = ${?KEYCLOAK_REALM}
        auth-server-url = ${?KEYCLOAK_URL}
        ssl-required = external
        ssl-required = ${?KEYCLOAK_SSL_REQUIRED}
        resource = ${?KEYCLOAK_CLIENT}
        public-client = true
        public-client = ${?KEYCLOAK_PUBLIC_CLIENT}
      }

      # Specific Keycloak configurations that override default configuration for applications
      # application-config {
      #   application-name {
      #     resource = application-client-id
      #   }
      # }

      # Define sources of principal assignment (constant value, from token or header)
      principals = [
        {
          #   Principal type
          type = "person"
          #   Source of assignment: const, token, header
          source = "token"
          #   Source field (only for token source)
          field = person_id
          field = ${?PERSON_ID_FIELD}
          #   Is this assignment required (only for token or header source)
          required = true
        }

        # {
        #   Principal type
        #    type = "person"
        #   Source of assignment: const, token, header
        #    source = "token"
        #   Source field (only for token source)
        #    field = person_id
        #   Header name (only for header source)
        #    header = X-Person
        #   Const value
        #    value = principal-id
        #   Is this assignment required (only for token or header source)
        #    required = true
        # }
      ]

      # Define attributes for authenticated request
      # attributes = [
      # {
      #   Attribute name
      #    name = attribute1
      #   Source of attribute: const, token, header
      #    source = "const"
      #   Source field (only for token source)
      #    field = person_id
      #   Header name (only for header source)
      #    header = X-Person
      #   Const value
      #    value = principal-id
      #   Is this assignment required (only for token or header source)
      #    required = true
      # }
      # ]
    }

    # Basic authentication configuration
    basic {

      # Accounts for basic authentication
      accounts {
        # Account admin. To use this account add the following header to HTTP request:
        #   Authorization: Basic YWRtaW46YWRtaW4=
        #admin {
        # Secret key
        #secret = "admin"
        # Define sources of principal assignment (constant value or from header)
        #principals = [
        # {
        #   type = "person"
        #   source = const
        #   value = "admin"
        # }
        # {
        #   Principal type
        #    type = "person"
        #   Source of assignment: const, header
        #    source = "header"
        #   Header name (only for header source)
        #    header = X-Person
        #   Const value (only for const source)
        #    value = principal-id
        #   Is this assignment required (only for header source)
        #    required = true
        # }
        #]

        # Define attributes for authenticated request
        # attributes = [
        # {
        #   Attribute name
        #    name = attribute1
        #   Source of attribute: const, header
        #    source = "cons"
        #   Header name  (only for header source)
        #    header = X-Attribute-1
        #   Const value
        #    value = principal-id
        #   Is this assignment required (only for  header source)
        #    required = true
        # }
        #]
        #}

      }
    }
  }

  authorization {

    # Use OrgStructure to get person's principals
    enable-org-structure = true
    enable-org-structure = ${?ENABLE_ORGSTRUCTURE_PRINCIPALS}

    # Authorization data source
    #   config  - authorize using config in config-authorizer below
    #   service - authorize using authorization microservice
    authorizer = "service"

    #config-authorizer {
    #  roles {
    #    admin-role = [
    #      {id = "annette.authorization.role.view"},
    #      {id = "annette.authorization.role.maintain"},
    #      {id = "annette.authorization.role.maintainPrincipals"},
    #      {id = "annette.authorization.role.viewPrincipals"},
    #      {id = "annette.authorization.assignments.view"},
    #      {id = "annette.person.view.all"},
    #      {id = "annette.person.maintain.all"},
    #      {id = "annette.orgStructure.hierarchy.view.all"},
    #      {id = "annette.orgStructure.hierarchy.maintain.all"},
    #      {id = "annette.orgStructure.orgRole.view.all"},
    #      {id = "annette.orgStructure.orgRole.maintain.all"},
    #      {id = "annette.application.application.maintain.all"},
    #      {id = "annette.application.translation.maintain.all"},
    #      {id = "annette.application.language.maintain.all"  },
    #    ]
    #  }

    #  assignments = [
    #    {
    #      role-id = admin-role
    #      principal-type = person
    #      principal-id = admin
    #    }
    #  ]
    #}

  }

  cms {
    post-file-bucket = ${?POST_FILE_BUCKET_PREFIX}cms-post-file-bucket
    post-file-bucket = ${?POST_FILE_BUCKET}
  }
}

alpakka.s3 {
  aws {
    credentials {
      provider = static
      access-key-id = "minioadmin"
      access-key-id = ${?MINIO_ACCESS_KEY}
      secret-access-key = "minioadmin"
      secret-access-key = ${?MINIO_SECRET_KEY}
    }

    region {
      provider = static
      default-region = "us-east-1"
    }
  }

  access-style = path
  endpoint-url = "http://localhost:9002"
  endpoint-url = ${?MINIO_URL}
}


