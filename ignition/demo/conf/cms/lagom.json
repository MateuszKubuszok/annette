[
  {
    "id": "lagom-01",
    "spaceId": "lagom",
    "featured": false,
    "authorId": {
      "principalType": "person",
      "principalId": "P0001"
    },
    "title": "Welcome to Lagom",
    "introContent": {
      "type": "markdown",
      "markdown": "The key to building an elastic, resilient and responsive system is starting with the right architecture... \n"
    },
    "content": {
      "type": "markdown",
      "markdown": "# What is Lagom?\n\nThe key to building an elastic, resilient and responsive system is starting with the right architecture &#8212; one rooted in a solid understanding of microservices, including concepts and best practices. Lagom provides an opinionated framework that acts like guide rails to speed you along the journey. Lagom tools and APIs simplify development and deployment of a system that includes microservices.\n# What's in the name?\n\nLagom is a Swedish word [meaning](https://en.wikipedia.org/wiki/Lagom) \"just the right amount\".\n\nOften, when people talk about microservices, they focus on the micro part of the name, assuming it means that a service should be small. We want to emphasize that the important thing when splitting a system into services is to find the right boundaries between services. This means aligning them with bounded contexts, business capabilities, and isolation requirements. A system of right-sized microservices will naturally achieve scalability and resilience requirements and be easy to deploy and manage. So, rather than focus on how small your services should be, design \"Lagom\" size services.\n# Where to begin\n\nIt takes time to adopt a new way of thinking about and solving problems. Lagom provides guidance with its framework, but ultimately it is up to you &#8212; and possibly others in your organization &#8212; to apply the principles in your domain. You will be able to do this successfully by fully understanding what motivates use of microservices and how they impact not just the resulting system, but the development process itself.\n\n[Reactive Microservices Architecture: Design Principles for Distributed Systems](https://info.lightbend.com/COLL-20XX-Reactive-Microservices-Architecture-RES-LP.html), by Jonas Bonér, describes how reactive microservices systems can satisfy the ever-increasing demands of modern software. He notes the positive effect when adopting such systems:\n\n> As we detangle our systems, we shift the power from central governing bodies to smaller teams who can seize opportunities rapidly and stay nimble because they understand the software within well defined boundaries that they control.\n\nWe strongly recommend reading Bonér's book before learning Lagom. Much of the documentation builds upon and refers to it. (You can download it for free from the [Lightbend website](https://www.lightbend.com/resources/e-books).)\n\nChoose the next step that's right for you:\n\n* Take Lagom for a quick spin by creating and running a [[Hello World|IntroGetStarted]] app.\n* Read [[Core Concepts|CoreConcepts]] to understand how the Lagom framework puts microservice-based design principles into practice.\n"
    },
    "publicationStatus": "published",
    "publicationTimestamp": "2021-06-08T09:44:43.464Z"
  },
  {
    "id": "lagom-03",
    "spaceId": "lagom",
    "featured": false,
    "authorId": {
      "principalType": "person",
      "principalId": "P0001"
    },
    "title": "Introduction and prerequisites",
    "introContent": {
      "type": "markdown",
      "markdown": "Lagom exposes two APIs, Java and Scala, and provides a framework and development environment as a set of libraries and build tool plugins. While the libraries can be consumed from any build tool, you can only take advantage of Lagom's high productivity development environment by using one of the supported build tools, Maven or sbt."
    },
    "content": {
      "type": "markdown",
      "markdown": "Lagom exposes two APIs, Java and Scala, and provides a framework and development environment as a set of libraries and build tool plugins. While the libraries can be consumed from any build tool, you can only take advantage of Lagom's high productivity development environment by using one of the supported build tools, Maven or sbt.\n\nWe recommend using [sbt](https://www.scala-sbt.org/) as the build tool for the Lagom Scala API. The sbt build tool provides dependency management, which downloads the Lagom libraries and plugins for you. When you create an sbt build, Lagom tool plugins will run your services and the associated Lagom infrastructure with a single command and hot reload when the tool detects code changes.\n\nFactoring or re-factoring functionality into right-sized services will be critical to the success of your project. And Lagom's opinionated framework will steer you in the right direction. But, it is a good idea to start small. For this reason, Lagom provides a Giter8 template that sets up a build structure for a Hello World application. The template contains two services to demonstrate intra-service communication, because, ([to quote](https://twitter.com/jboner/status/699536472442011648) Jonas Bonér):\n\n> One microservice is no microservice - they come in systems.\n\nThe template also gives you a quick way to verify that your project and build tool are set up correctly. Later, you can download more complex [[Lagom examples|LagomExamples]] that demonstrate Lagom functionality.\n\nWe also suggest that you start from the command line. After using the template to create an sbt build, you can integrate it into any IDE. The documentation provides tips to help you with Eclipse or IntelliJ, two popular IDEs.\n\nBefore trying the template, make sure that your environment conforms to Lagom prerequisites:\n\n* Java Development Kit (JDK), version 8\n* sbt 1.x (1.2.1 or later recommended)\n* Internet access (If using a proxy, verify that an HTTP_PROXY environment variable points to the correct location)\n\nFor more details on verifying or installing prerequisites see the following sections:\n\n* [JDK](#JDK)\n* [Installing sbt](#sbt)\n* [Proxy setup](#Proxy-setup)\n\nWhen your environment is ready, follow the instructions for [[Creating and running Hello World|IntroGetStarted]].\n\n## JDK\n\nBefore installing sbt, you need to ensure you have a Java Development Kit (JDK) installed on your system.  Lagom requires at least JDK 8.\n\nYou can check whether you have JDK 8 by running `java -version` and `javac -version` from the command line.\n\nThe `java -version` command should return messages similar to the following:\n\n```\njava version \"1.8.0_162\"\nJava(TM) SE Runtime Environment (build 1.8.0_162-b12)\nJava HotSpot(TM) 64-Bit Server VM (build 25.162-b12, mixed mode)\n```\n\nThe `javac -version` command should return a message similar to:\n\n```\njavac 1.8.0_162\n```\n\nIf you have the correct JDK and the console cannot find `java` or `javac`, search the web for information about setting environment variables on your system. For example, the following pages provide tips for configuring Java:\n\n* [On systems running Linux](https://stackoverflow.com/questions/33860560/how-to-set-java-environment-variables-using-shell-script)\n* [On MacOS](https://osxdaily.com/2015/07/28/set-enviornment-variables-mac-os-x/)\n* [On Windows systems](https://stackoverflow.com/questions/1672281/environment-variables-for-java-installation)\n\nIf you don't have the correct version, you can get it from the [Oracle Java downloads page](https://www.oracle.com/technetwork/java/javase/downloads/index.html).\n\n## sbt\n\nLagom recommends sbt 1.2.1 or later.\n\nsbt can be downloaded from [here](https://www.scala-sbt.org/download.html), while instructions for installing it can be found [here](https://www.scala-sbt.org/release/docs/Setup.html)\n\nTo check which version of sbt you are using, run `sbt sbtVersion` from the command line. The console messages should look similar to the following :\n\n```\n[info] Set current project to example (in build file:/home/alice/)\n[info] 1.2.1\n```\n\n## Proxy setup\n\nIf you can only access the web through a proxy, create and/or set the `HTTP_PROXY` environment variable on your machine  to your proxy's URL, for example, `HTTP_PROXY=http://<host>:<port>`.\n"
    },
    "publicationStatus": "published",
    "publicationTimestamp": "2021-06-08T09:44:43.464Z"
  },
  {
    "id": "lagom-03",
    "spaceId": "lagom",
    "featured": false,
    "authorId": {
      "principalType": "person",
      "principalId": "P0001"
    },
    "title": "Creating and running Hello World with sb",
    "introContent": {
      "type": "markdown",
      "markdown": "A Lagom system is typically made up of a set of sbt builds, with each build providing multiple services.  The easiest way to get started with a new Lagom system is to create a new project using the `lagom` sbt Giter8 template. This creates an sbt project, with two services, `hello` and `stream`. The template uses the `.sbtopts` file to increase the memory used by the `JVM` when starting your project. See [[Increase Memory in sbt|JVMMemoryOnDev]] for other ways to increase memory."
    },
    "content": {
      "type": "markdown",
      "markdown": "A Lagom system is typically made up of a set of sbt builds, with each build providing multiple services.  The easiest way to get started with a new Lagom system is to create a new project using the `lagom` sbt Giter8 template. This creates an sbt project, with two services, `hello` and `stream`. The template uses the `.sbtopts` file to increase the memory used by the `JVM` when starting your project. See [[Increase Memory in sbt|JVMMemoryOnDev]] for other ways to increase memory.\n\nFollow these steps to create and run Hello World:\n\n1. [Create the build](#Create-the-build)\n1. [Browse the build](#Browse-the-build)\n1. [Run Hello World](#Run-Hello-World)\n\n## Create the build\n\nChoose a location on your file system for your Lagom projects. The template will prompt you for a project name and will create a directory with that name that contains the build structure and Lagom example services. Note that it can take from a few seconds to a few minutes for sbt to download dependencies.\n\nTo create your project, follow these steps:\n\n1. Open a console and change into the directory you selected for your project.\n\n1. Enter the following command:\n\n   ```\n   sbt new lagom/lagom-scala.g8\n   ```\n\n1. The template prompts for the following parameters. Press `Enter` to accept the defaults or specify your own values:\n\n   * `name` - Becomes the name of the top-level project directory.\n   * `organization` - Used as a package name.\n   * `version` - A version number for your system.\n   * `lagom-version` - The version number of Lagom, such as 1.3.2. Be sure to use the [current stable release](https://www.lagomframework.com/documentation/).\n\n## Browse the build\n\nThe created project contains the following elements:\n\n```\nhello                   → Project root\n └ hello-api            → hello api project\n └ hello-impl           → hello implementation project\n └ hello-stream-api     → hello-stream api project\n └ hello-stream-impl    → hello-stream implementation project\n └ project              → sbt configuration files\n   └ build.properties   → Marker for sbt project\n   └ plugins.sbt        → sbt plugins including the declaration for Lagom itself\n └ build.sbt            → Your project build file\n```\n\n* Notice how each service is broken up into two projects: api and implementation. The `api` project contains a service interface through which consumers may interact with the service. The `impl` project contains the actual service implementation.\n* The `project` folder contains sbt-specific files.\n* The `build.sbt` file contains all information necessary to build, run, and deploy your services.\n\n\n## Run Hello World\n\nLagom includes a development environment that let you start all your services by simply typing `runAll` in the sbt console. To run Hello World, change directories to the top-level directory and start sbt, when the command prompt displays, invoke `runAll`. For example:\n\n```\ncd hello\nsbt\n... (booting up)\n> runAll\n```\nIt will take a bit of time to build the project and start the services. Among other messages, you should see the following:\n```\n[info] Starting embedded Cassandra server\n..........\n[info] Cassandra server running at 127.0.0.1:4000\n[info] Service locator is running at http://localhost:9008\n[info] Service gateway is running at http://localhost:9000\n[info] Service hello-impl listening for HTTP on 127.0.0.1:24266\n[info] Service hello-impl listening for HTTPS on 127.0.0.1:50695\n[info] Service hello-stream-impl listening for HTTP on 127.0.0.1:26230\n[info] Service hello-stream-impl listening for HTTPS on 127.0.0.1:58440\n(Services started, press enter to stop and go back to the console...)\n```\n\nVerify that the services are indeed up and running by invoking one of its endpoints from any HTTP client, such as a browser:\n\n```\nhttp://localhost:9000/api/hello/World\n```\n\nThe service returns the message, `Hello, World!`. Congratulations, you've built your first Lagom project!\n"
    },
    "publicationStatus": "published",
    "publicationTimestamp": "2021-06-08T09:44:43.464Z"
  },
  {
    "id": "lagom-04",
    "spaceId": "lagom",
    "featured": false,
    "authorId": {
      "principalType": "person",
      "principalId": "P0001"
    },
    "title": "Understanding Hello World",
    "introContent": {
      "type": "markdown",
      "markdown": "After creating and running Hello World from the command line, you no doubt appreciate what Lagom framework did for you. There was no need to determine what infrastructure you might need and then install and configure it. The template removed the necessity to set up a project or build structure. And, as you create services of your own, Lagom detects changes and performs a hot reload! Lagom allows you to concentrate on satisfying your business needs."
    },
    "content": {
      "type": "markdown",
      "markdown": "After creating and running Hello World from the command line, you no doubt appreciate what Lagom framework did for you. There was no need to determine what infrastructure you might need and then install and configure it. The template removed the necessity to set up a project or build structure. And, as you create services of your own, Lagom detects changes and performs a hot reload! Lagom allows you to concentrate on satisfying your business needs.\n\nThe separation of concerns illustrated in Hello World and an introduction to service descriptors and the registry will help you as you start developing your own microservices:\n\n* [Service interface](#Service-interface)\n* [Service implementation](#Service-implementation)\n\n# Service interface\n\nThe service interface belongs in the `api` project. For instance, the service interface for the `hello` service resides in the `hello-api` project (look for the `HelloService.scala` source file).\n\n@[helloservice](code/GettingStarted.scala)\n\nNote that:\n\n* The service interface inherits from [`Service`](api/com/lightbend/lagom/scaladsl/api/Service.html) and provides an implementation of [`Service.descriptor`](api/com/lightbend/lagom/scaladsl/api/Service.html#descriptor) method.\n\n* The implementation of `Service.descriptor` returns a [`Descriptor`](api/com/lightbend/lagom/scaladsl/api/Descriptor.html). The `HelloService` descriptor defines the service name and the REST endpoints it offers. For each endpoint, declare an abstract method in the service interface as illustrated in the `HelloService.hello` method. For more information, see [[Service Descriptors|ServiceDescriptors]].\n\n# Service implementation\n\nThe related `impl` project, `hello-impl` provides implementation for the service abstract methods. For instance, the `HelloServiceImpl.scala` source file contains the service implementation of the `HelloService.hello` method for the `hello` service. The service implementation uses a [sharded](https://doc.akka.io/docs/akka/2.6/typed/cluster-sharding.html#introduction), [persistent](https://doc.akka.io/docs/akka/2.6/typed/persistence.html#introduction), typed actor providing data persistence using [[Event Sourcing and CQRS|ES_CQRS]].\n\n@[helloserviceimpl](code/GettingStarted.scala)\n\n"
    },
    "publicationStatus": "published",
    "publicationTimestamp": "2021-06-08T09:44:43.464Z"
  },
  {
    "id": "lagom-05",
    "spaceId": "lagom",
    "featured": false,
    "authorId": {
      "principalType": "person",
      "principalId": "P0001"
    },
    "title": "Development Environment",
    "introContent": {
      "type": "markdown",
      "markdown": "Lagom's sbt and Maven based development environments allow running any number of services together with a single command.\n\nThe same command also reloads your services when the code changes, so that you don't have to manually restart them. You can stay focused on your work and let Lagom do the compiling and reloading.\n"
    },
    "content": {
      "type": "markdown",
      "markdown": "Lagom's sbt and Maven based development environments allow running any number of services together with a single command.\n\nThe same command also reloads your services when the code changes, so that you don't have to manually restart them. You can stay focused on your work and let Lagom do the compiling and reloading.\n\n## Running all services in Maven\n\nTo run all services in Maven, simply run the `lagom:runAll` command:\n\n```console\n$ cd <path to your Lagom project>\n$ mvn lagom:runAll\nINFO ...\nINFO Service hello-impl listening for HTTP on 127.0.0.1:24266\nINFO Service hello-impl listening for HTTPS on 127.0.0.1:50695\nINFO Service hello-stream-impl listening for HTTP on 127.0.0.1:26230\nINFO Service hello-stream-impl listening for HTTPS on 127.0.0.1:58440\n(Services started, press enter to stop and go back to the console...)\n```\n\nThis may take a while if you have a lot of services or if dependencies are being retrieved for the first time.\n\n## Starting the sbt development console\n\nAssuming you have an sbt project, it's now time to fire up the console on your Lagom project directory:\n\n```console\n$ cd <path to your Lagom project>\n$ sbt\n[info] ...\n>\n```\n\nTo run all Lagom services together, with automatic reloading, just enter `runAll` in the sbt console:\n\n```console\n> runAll\n[info] ...\n[info] Service hello-impl listening for HTTP on 127.0.0.1:24266\n[info] Service hello-impl listening for HTTPS on 127.0.0.1:50695\n[info] Service stream-impl listening for HTTP on 127.0.0.1:26230\n[info] Service stream-impl listening for HTTPS on 127.0.0.1:58440\n(Services started, press enter to stop and go back to the console...)\n```\n\nThis may take a while if you have a lot of services or if dependencies are being retrieved for the first time.\n\n## Hot reloading\n\nOnce the \"Services started\" message has appeared, if you make a change to your source code, you'll see output like this in the console:\n\n```console\n[info] Compiling 1 Java source to /<project-path>/target/scala-2.12/classes...\n\n--- (RELOAD) ---\n```\n\n## Managing custom services\n\nBy default, Lagom will, in addition to running your services, also start a service locator, a Cassandra server and a Kafka server. If using sbt, you can customize what Lagom starts, including adding other databases and infrastructure services.\n\n> **Note:** Managing custom services is not currently supported in Maven, due to Maven's inability to arbitrarily add behaviour, such as the logic necessary to start and stop an external process, to a build. This is typically not a big problem, it simply means developers have to manually install, start and stop these services themselves.\n\nTo add a custom service, first you need to define a task to start the service in your `build.sbt`. The task should produce a result of `Closeable`, which can be used to stop the service. Here's an example for Elastic Search:\n\n@[start-elastic-search](code/dev-environment.sbt)\n\nNow we're able to start Elastic Search, we need to add this task to Lagom's list of infrastructure services, so that Lagom will start it when `runAll` is executed. This can be done by modifying the `lagomInfrastructureServices` setting:\n\n@[infrastructure-services](code/dev-environment.sbt)\n\n## Behind the scenes\n\n<!-- copied this section to concepts, perhaps it can be removed later -->\nWhat's happening behind the scenes when you `runAll`?\n\n* an embedded [[Service Locator|ServiceLocator]] is started\n* an embedded [[Service Gateway|ServiceLocator#Service-Gateway]] is started\n* a [[Cassandra server|CassandraServer]] is started\n* a [[Kafka server|KafkaServer]] is started\n* your services start\n    * ...and register with the Service Locator\n    * ...and register the publicly accessible paths in the Service Gateway\n\nThis all happens automatically without special code or additional configuration.\n\n<!--end copied section -->\n\nYou can verify that your services are running by viewing `http://localhost:9008/services` in a web browser (or with a command line tool such as `curl`). The Service Locator, running on port `9008`, will return JSON such as:\n\n```\n[\n  {\n    \"name\":\"cas_native\",\n    \"url\":\"tcp://127.0.0.1:4000/cas_native\",\n    \"portName\":null\n  },\n  {\n    \"name\":\"kafka_native\",\n    \"url\":\"tcp://localhost:9092/kafka_native\",\n    \"portName\":null\n  },\n  {\n    \"name\":\"hello\",\n    \"url\":\"http://127.0.0.1:65499\",\n    \"portName\":null\n  },\n  {\n    \"name\":\"hello\",\n    \"url\":\"http://127.0.0.1:65499\",\n    \"portName\":\"http\"\n    }\n]\n```\n\n`cas_native` is the [Cassandra](https://cassandra.apache.org/) server. As you will learn in the [[documentation for writing persistent and clustered services|PersistentEntity]], Cassandra is the default database in Lagom, and it's an integral part of the development environment.\n\nThe Service Locator, Cassandra, and Kafka are covered in more detail in the sections that follow.\n"
    },
    "publicationStatus": "published",
    "publicationTimestamp": "2021-06-08T09:44:43.464Z"
  },
  {
    "id": "lagom-06",
    "spaceId": "lagom",
    "featured": false,
    "authorId": {
      "principalType": "person",
      "principalId": "P0001"
    },
    "title": "Running services",
    "introContent": {
      "type": "markdown",
      "markdown": "As outlined in the [[development environment introduction|DevEnvironment]], all Lagom services defined in a build can be run with a single task: `runAll`. When executing this task, an embedded [[Service Locator|ServiceLocator]] is started, an embedded [[Cassandra server|CassandraServer]] is also started, and then all your services are started, in parallel. Furthermore, all started services will be running in hot-reload mode. Hot-reload means that the services are automatically reloaded on every change you make, so that you don't have to manually restart them."
    },
    "content": {
      "type": "markdown",
      "markdown": "As outlined in the [[development environment introduction|DevEnvironment]], all Lagom services defined in a build can be run with a single task: `runAll`. When executing this task, an embedded [[Service Locator|ServiceLocator]] is started, an embedded [[Cassandra server|CassandraServer]] is also started, and then all your services are started, in parallel. Furthermore, all started services will be running in hot-reload mode. Hot-reload means that the services are automatically reloaded on every change you make, so that you don't have to manually restart them.\n\nMost times, the `runAll` task will serve you well. However, there will be occasions when you may want to manually start only a few services, and this is when the `run` task will come in handy. The `run` task is available to each of your Lagom service implementation projects.\n\nIn Maven, you can execute the `run` task on a particular service by using the maven project list flag, like so:\n\n```\n$ mvn -pl <your-project-name> lagom:run\n```\n\nIn sbt, you can specify the project to run on the sbt console by simply prefixing the service project's name, i.e.:\n\n```\n$ sbt\n> <your-project-name>/run\n```\n\nRemember that `run` only starts the specified service. Neither the Service Locator nor the Cassandra server start implicitly. Hence, consider manually starting both the [[Service Locator|ServiceLocator#Start-and-stop]] and the [[Cassandra server|CassandraServer#Start-and-stop]] prior to manually running other services.\n"
    },
    "publicationStatus": "published",
    "publicationTimestamp": "2021-06-08T09:44:43.464Z"
  },
  {
    "id": "lagom-06",
    "spaceId": "lagom",
    "featured": false,
    "authorId": {
      "principalType": "person",
      "principalId": "P0001"
    },
    "title": "Running services",
    "introContent": {
      "type": "markdown",
      "markdown": "As outlined in the [[development environment introduction|DevEnvironment]], all Lagom services defined in a build can be run with a single task: `runAll`. When executing this task, an embedded [[Service Locator|ServiceLocator]] is started, an embedded [[Cassandra server|CassandraServer]] is also started, and then all your services are started, in parallel. Furthermore, all started services will be running in hot-reload mode. Hot-reload means that the services are automatically reloaded on every change you make, so that you don't have to manually restart them."
    },
    "content": {
      "type": "markdown",
      "markdown": "As outlined in the [[development environment introduction|DevEnvironment]], all Lagom services defined in a build can be run with a single task: `runAll`. When executing this task, an embedded [[Service Locator|ServiceLocator]] is started, an embedded [[Cassandra server|CassandraServer]] is also started, and then all your services are started, in parallel. Furthermore, all started services will be running in hot-reload mode. Hot-reload means that the services are automatically reloaded on every change you make, so that you don't have to manually restart them.\n\nMost times, the `runAll` task will serve you well. However, there will be occasions when you may want to manually start only a few services, and this is when the `run` task will come in handy. The `run` task is available to each of your Lagom service implementation projects.\n\nIn Maven, you can execute the `run` task on a particular service by using the maven project list flag, like so:\n\n```\n$ mvn -pl <your-project-name> lagom:run\n```\n\nIn sbt, you can specify the project to run on the sbt console by simply prefixing the service project's name, i.e.:\n\n```\n$ sbt\n> <your-project-name>/run\n```\n\nRemember that `run` only starts the specified service. Neither the Service Locator nor the Cassandra server start implicitly. Hence, consider manually starting both the [[Service Locator|ServiceLocator#Start-and-stop]] and the [[Cassandra server|CassandraServer#Start-and-stop]] prior to manually running other services.\n"
    },
    "publicationStatus": "published",
    "publicationTimestamp": "2021-06-08T09:44:43.464Z"
  },
  {
    "id": "lagom-07",
    "spaceId": "lagom",
    "featured": false,
    "authorId": {
      "principalType": "person",
      "principalId": "P0001"
    },
    "title": "Development Environment",
    "introContent": {
      "type": "markdown",
      "markdown": "# markdown-it-vue\n\n## Image size and Viewer\n\n![gvf](http://www.aqcoder.com/gvf-project.png =x50)\n![ravenq](http://www.aqcoder.com/ravenq-qr.png =50x50)\n\n## GitHub Table of Contents\n\n[toc]\n\nNote: Only `h2` and `h3` are shown in toc.\n\n## alter\n\nMarkup is similar to fenced code blocks. Valid container types are `success`, `info`, `warning` and `error`.\n\n::: success\nYou have got it.\n:::\n\n::: info\nYou have new mail.\n:::\n\n::: warning\nYou have new mail.\n:::\n\n::: error\nStaying up all night is bad for health.\n:::\n\n## mermaid charts\n\n### mermaid Flowchart\n\n[Flowchart Syntax](http://knsv.github.io/mermaid/#flowcharts-basic-syntax)\n\n```mermaid\ngraph TD;\n    A-->B;\n    A-->C;\n    B-->D;\n    C-->D;\n```\n\n```\nsequenceDiagram\n    participant Alice\n    participant Bob\n    Alice->John: Hello John, how are you?\n    loop Healthcheck\n        John->John: Fight against hypochondria\n    end\n    Note right of John: Rational thoughts <br/>prevail...\n    John-->Alice: Great!\n    John->Bob: How about you?\n    Bob-->John: Jolly good!\n```\n\n## Definition list\n\nTerm 1\n  ~ Definition 1\n\nTerm 2\n  ~ Definition 2a\n  ~ Definition 2b\n\n[Definition List Syntax](http://pandoc.org/README.html#definition-lists)\n\n\n## AsciiMath\n\nInline AsciiMath: `@(1/2[1-(1/2)^n])/(1-(1/2))=s_n@`\n\n```AsciiMath\noint_Cx^3 dx+4y^2 dy\n\n2=(((3-x)xx2)/(3-x))\n\nsum_(m=1)^oosum_(n=1)^oo(m^2 n)/(3^m(m3^n+n3^m)\n```\n\n```ASCIIMath\nphi_n(kappa) = 1/(4pi^2 kappa^2)\n int_0^oo (sin(kappa R))/(kappa R)\n del/(del R)\n[R^2 (del D_n (R))/(del R)] del R\n```\n\n[AsciiMath Documentation](http://asciimath.org/)\n\n## Subscript: H~2~O\n\nYou can also use inline math: `$H_2O$`\n\n\n## Superscript: 29^th^\n\nYou can also use inline math: `$29^{th}$`\n\n\n## Emoji: :panda_face: :sparkles: :camel: :boom: :pig:\n\n[Emoji Cheat Sheet](http://www.emoji-cheat-sheet.com/)\n\n## Fontawesome: :fa-car: :fa-flag: :fa-bicycle: :fa-leaf: :fa-heart:\n\n[All the Font Awesome icons](http://fontawesome.io/icons/)\n\n## Echarts\n\n[Documentation for Echarts](http://echarts.baidu.com)\n\nThe width and height is the size for chart container.\n\n```echarts\n{\n  \"width\": 500,\n  \"height\": 400,\n  \"series\": [\n    {\n      \"name\": \"访问来源\",\n      \"type\": \"pie\",\n      \"radius\": \"55%\",\n      \"data\": [\n        {\n          \"value\": 235,\n          \"name\": \"视频广告\"\n        },\n        {\n          \"value\": 274,\n          \"name\": \"联盟广告\"\n        },\n        {\n          \"value\": 310,\n          \"name\": \"邮件营销\"\n        },\n        {\n          \"value\": 335,\n          \"name\": \"直接访问\"\n        },\n        {\n          \"value\": 400,\n          \"name\": \"搜索引擎\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n## code\n\n### c\n```c\n#include <stdio.h>\nint main(int argc char* argv[]) {\n  printf(\"Hello, World!\");\n  return 0;\n}\n```\n\n### json\n\n```json\n{\n  \"name\": \"markdown-it-vue\"\n}\n```\n\n### javascript\n```json\nimport MarkdownItVue from 'markdown-it-vue'\nexport default {\n  components: {\n    MarkdownItVue\n  }\n}\n```\n\n### bash\n```bash\nnpm install markdown-it-vue\n```\n\n## table\n\n| First Header  | Second Header |\n| ------------- | ------------- |\n| Content Cell  | Content Cell  |\n| Content Cell  | Content Cell  |\n\n## flowchart.js\n\n```flowchart.js\nst=>start: Start|past:>http://www.google.com[blank]\ne=>end: End:>http://www.google.com\nop1=>operation: My Operation|past\nop2=>operation: Stuff|current\nsub1=>subroutine: My Subroutine|invalid\ncond=>condition: Yes\nor No?|approved:>http://www.google.com\nc2=>condition: Good idea|rejected\nio=>inputoutput: catch something...|request\npara=>parallel: parallel tasks\n\nst->op1(right)->cond\ncond(yes, right)->c2\ncond(no)->para\nc2(true)->io->e\nc2(false)->e\n\npara(path1, bottom)->sub1(left)->op1\npara(path2, right)->op2->e\n\nst@>op1({\"stroke\":\"Red\"})@>cond({\"stroke\":\"Red\",\"stroke-width\":6,\"arrow-end\":\"classic-wide-long\"})@>c2({\"stroke\":\"Red\"})@>op2({\"stroke\":\"Red\"})@>e({\"stroke\":\"Red\"})\n```\n"
    },
    "content": {
      "type": "markdown",
      "markdown": "# markdown-it-vue\n\n## Image size and Viewer\n\n![gvf](http://www.aqcoder.com/gvf-project.png =x50)\n![ravenq](http://www.aqcoder.com/ravenq-qr.png =50x50)\n\n## GitHub Table of Contents\n\n[toc]\n\nNote: Only `h2` and `h3` are shown in toc.\n\n## alter\n\nMarkup is similar to fenced code blocks. Valid container types are `success`, `info`, `warning` and `error`.\n\n::: success\nYou have got it.\n:::\n\n::: info\nYou have new mail.\n:::\n\n::: warning\nYou have new mail.\n:::\n\n::: error\nStaying up all night is bad for health.\n:::\n\n## mermaid charts\n\n### mermaid Flowchart\n\n[Flowchart Syntax](http://knsv.github.io/mermaid/#flowcharts-basic-syntax)\n\n```mermaid\ngraph TD;\n    A-->B;\n    A-->C;\n    B-->D;\n    C-->D;\n```\n\n```\nsequenceDiagram\n    participant Alice\n    participant Bob\n    Alice->John: Hello John, how are you?\n    loop Healthcheck\n        John->John: Fight against hypochondria\n    end\n    Note right of John: Rational thoughts <br/>prevail...\n    John-->Alice: Great!\n    John->Bob: How about you?\n    Bob-->John: Jolly good!\n```\n\n## Definition list\n\nTerm 1\n  ~ Definition 1\n\nTerm 2\n  ~ Definition 2a\n  ~ Definition 2b\n\n[Definition List Syntax](http://pandoc.org/README.html#definition-lists)\n\n\n## AsciiMath\n\nInline AsciiMath: `@(1/2[1-(1/2)^n])/(1-(1/2))=s_n@`\n\n```AsciiMath\noint_Cx^3 dx+4y^2 dy\n\n2=(((3-x)xx2)/(3-x))\n\nsum_(m=1)^oosum_(n=1)^oo(m^2 n)/(3^m(m3^n+n3^m)\n```\n\n```ASCIIMath\nphi_n(kappa) = 1/(4pi^2 kappa^2)\n int_0^oo (sin(kappa R))/(kappa R)\n del/(del R)\n[R^2 (del D_n (R))/(del R)] del R\n```\n\n[AsciiMath Documentation](http://asciimath.org/)\n\n## Subscript: H~2~O\n\nYou can also use inline math: `$H_2O$`\n\n\n## Superscript: 29^th^\n\nYou can also use inline math: `$29^{th}$`\n\n\n## Emoji: :panda_face: :sparkles: :camel: :boom: :pig:\n\n[Emoji Cheat Sheet](http://www.emoji-cheat-sheet.com/)\n\n## Fontawesome: :fa-car: :fa-flag: :fa-bicycle: :fa-leaf: :fa-heart:\n\n[All the Font Awesome icons](http://fontawesome.io/icons/)\n\n## Echarts\n\n[Documentation for Echarts](http://echarts.baidu.com)\n\nThe width and height is the size for chart container.\n\n```echarts\n{\n  \"width\": 500,\n  \"height\": 400,\n  \"series\": [\n    {\n      \"name\": \"访问来源\",\n      \"type\": \"pie\",\n      \"radius\": \"55%\",\n      \"data\": [\n        {\n          \"value\": 235,\n          \"name\": \"视频广告\"\n        },\n        {\n          \"value\": 274,\n          \"name\": \"联盟广告\"\n        },\n        {\n          \"value\": 310,\n          \"name\": \"邮件营销\"\n        },\n        {\n          \"value\": 335,\n          \"name\": \"直接访问\"\n        },\n        {\n          \"value\": 400,\n          \"name\": \"搜索引擎\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n## code\n\n### c\n```c\n#include <stdio.h>\nint main(int argc char* argv[]) {\n  printf(\"Hello, World!\");\n  return 0;\n}\n```\n\n### json\n\n```json\n{\n  \"name\": \"markdown-it-vue\"\n}\n```\n\n### javascript\n```json\nimport MarkdownItVue from 'markdown-it-vue'\nexport default {\n  components: {\n    MarkdownItVue\n  }\n}\n```\n\n### bash\n```bash\nnpm install markdown-it-vue\n```\n\n## table\n\n| First Header  | Second Header |\n| ------------- | ------------- |\n| Content Cell  | Content Cell  |\n| Content Cell  | Content Cell  |\n\n## flowchart.js\n\n```flowchart.js\nst=>start: Start|past:>http://www.google.com[blank]\ne=>end: End:>http://www.google.com\nop1=>operation: My Operation|past\nop2=>operation: Stuff|current\nsub1=>subroutine: My Subroutine|invalid\ncond=>condition: Yes\nor No?|approved:>http://www.google.com\nc2=>condition: Good idea|rejected\nio=>inputoutput: catch something...|request\npara=>parallel: parallel tasks\n\nst->op1(right)->cond\ncond(yes, right)->c2\ncond(no)->para\nc2(true)->io->e\nc2(false)->e\n\npara(path1, bottom)->sub1(left)->op1\npara(path2, right)->op2->e\n\nst@>op1({\"stroke\":\"Red\"})@>cond({\"stroke\":\"Red\",\"stroke-width\":6,\"arrow-end\":\"classic-wide-long\"})@>c2({\"stroke\":\"Red\"})@>op2({\"stroke\":\"Red\"})@>e({\"stroke\":\"Red\"})\n```\n"
    },
    "publicationStatus": "published",
    "publicationTimestamp": "2021-06-08T09:44:43.464Z"
  }
]
